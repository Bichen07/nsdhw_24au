Advanced Vector Search for RAG Systems
======================================

Basic Information
-----------------
This project, tentatively named "AdvancedVectorSearch", aims to develop and implement novel vector search methods for RAG systems.

Vector search is a crucial component in modern information retrieval systems, particularly in RAG applications. While FAISS is a well-established library for efficient similarity search, there's room for innovation in search methodologies. 

Note that the goal of this project will focus on vector search, similarity comparison function, vector data storage, and does not include matrix calculations of LLM.

Problem to Solve
----------------
The primary challenges this project aims to address are:

1. Improving search speed beyond basic linear search, especially for high-dimensional vector spaces common in RAG systems.
2. Developing new similarity metrics that may be more suitable for specific RAG applications.
3. Creating a flexible, extensible framework that allows for easy experimentation with different search algorithms and metrics.
4. Balancing speed, accuracy, and memory usage in vector search operations.

Prospective Users
-----------------
This project will benefit:

1. Researchers and developers working on RAG systems.
2. Data scientists and machine learning engineers dealing with large-scale similarity search problems.
3. Information retrieval specialists looking for customizable vector search solutions.
4. Anyone working with high-dimensional data requiring efficient similarity search capabilities.
5. Graduate students who lack graduation thesis.

System Architecture
-------------------
The AdvancedVectorSearch system will consist of the following components:

1. Dataset Module: For generating and managing large-scale, high-dimensional vector datasets for testing and benchmarking.
2. Index Module: Implementing various similarity comparison functions and indexing structures.
3. Search Module: Providing add and search functionalities with support for different search algorithms.
4. Benchmark Module: For comparing the implemented methods against linear search and potentially FAISS in terms of speed, accuracy, and memory usage.

The system will be implemented in C++ for core functionalities, with Python bindings for ease of use.

API Description
---------------
The AdvancedVectorSearch API will include:

1. Dataset Management
2. Index Operations
3. Search Operations
4. Benchmark

Engineering Infrastructure
--------------------------
- Version Control: Git, hosted on GitHub
- CI: GitHub Actions for automated testing and benchmarking

Schedule
--------
- Week 1: Set up project repository, basic infrastructure, and start on dataset generation module.
- Week 2: Implement basic linear search as a baseline and develop the benchmark module.
- Week 3: Research and implement the first advanced search algorithm.
- Week 4: Develop and integrate parallel processing capabilities for the search algorithms.
- Week 5: Implement additional similarity metrics and corresponding search algorithms.
- Week 6: Create Python bindings and ensure seamless integration with Python environments.
- Week 7: Conduct comprehensive benchmarking and optimize performance.
- Week 8: Refine documentation, create usage examples, and prepare for initial release.

Note: This time plan is generated by GPT-4o, and the actual work progress may vary.

References
----------
1. FAISS (Facebook AI Similarity Search): https://github.com/facebookresearch/faiss


Projects by Account Names
+++++++++++++++++++++++++

Follow the format to add your project:

::

1. `SUNGOD3 <https://github.com/SUNGOD3>`__ for
   `AdvancedVectorSearch <SUNGOD3/README.rst>`__:
   https://github.com/SUNGOD3/AdvancedVectorSearch

.. note::

  Append your project after the first example entry.  Do not delete the example
  entry.
